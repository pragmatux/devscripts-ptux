#!/bin/sh
# usage: ptuxbuild [<args>...]
#
# Build the package in the working directory. All arguments are passed to
# git-buildpackage.
#
# If PTUXBUILD_DOCKER_IMAGE is defined in the environment, run ptuxbuild in a
# container based on the given image.

set -e

run_in_container ()
{
	exec docker run \
		--volume=$HOME:$HOME \
		--workdir=$PWD \
		--user=$(id --user):$(id --group) \
		--hostname=container \
		--entrypoint=ptuxbuild \
		$PTUXBUILD_DOCKER_IMAGE \
		"$@"
}

set_env ()
{
	# If -a<arch> is in $@, set environment using dpkg-architecture so
	# all tools see the architecture target.
	while [ "$#" -gt 0 ]; do
	case "$1,$2" in
		-a?*,*) # traditional -a<arch> format
			arch="${1#-a}"
			eval "$(dpkg-architecture -s -a$arch)"
			return
			;;
		-a,?*) # non-traditional -a <arch> format
			arch="$2"
			eval "$(dpkg-architecture -s -a$arch)"
			return
			;;
		*)
			shift 1
			;;
	esac
	done
}

main ()
{
	set_env "$@"

	dh_clean
	ptuxchange
	git-buildpackage -us -uc --git-ignore-branch "$@"

	output="debian/build"
	echo "ptuxbuild: moving generated files to $output"
	mkdir -p $output
	ptuxfind build | xargs -I% mv % $output
}

if [ "$PTUXBUILD_DOCKER_IMAGE" ]; then
	run_in_container "$@"
else
	main "$@"
fi
