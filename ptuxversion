#!/bin/sh
set -e

# Commits along the authoritative branch are considered “release commits”
# (i.e., they contribute to the version number), with the exception of commits
# that are not in the branch’s upstream, should it have one. Commits not in the
# authoritative branch, or those which are not in the authoritative branch’s
# upstream should it have one, are considered “development commits,” and
# receive a version number based on the time.
#
# The authoritative branch defaults to “master.” If there is no authoritative
# branch, the authoritative part of the version number is “0.”

tag_and_distance ()
{
	commit="$1"
	base="$2"

	# Find the nearest tag within the range $base..$commit.
	tag=$(git describe --abbrev=0 --tags --match debian/\* $commit 2>/dev/null || :)
	if [ "$tag" ] \
	&& [ "$base" ] \
	&& [ "$(git merge-base $tag $base)" = "$(git rev-parse $tag)" ]; then
		# The tag comes before $base, so none exist in the range.
		tag=""
	fi

	if [ "$tag" ]; then
		# Output "tag+distance", where distance is the distance past the
		# tag, unless tag+distance is equal to the distance above the
		# base, in which case output one, summed result.

		# Select the debian/* tag name. There might be other tags
		# pointing at this commit, e.g., from upstream.
		tag=$(git tag --list --points-at $tag debian/\*)

		if [ "${tag#debian/}" = "$(git rev-list --count ${base:+$base..}$tag)" ]; then
			echo -n $(git rev-list --count ${base:+$base..}$commit)
		else
			name=$(echo -n ${tag#debian/} | tr _ :)
				# underscores represent the epoch seperator
			dist=$(git rev-list --count $tag..$commit)
			echo -n ${name}$([ $dist -gt 0 ] && echo -n +$dist)
		fi
	else
		dist=$(git rev-list --count ${base:+$base..}$commit)
		echo -n $dist
	fi
}

is_dirty ()
{
	! git ls-files --modified --others --exclude-standard | sed q1 >/dev/null
}

git_suffix ()
{
	short="$(git rev-parse --short HEAD)"
	is_dirty && dirty="~dirty" || dirty=""
	echo -n \~g$short$dirty
}

development_suffix ()
{
	echo -n +T$(date +%s)
}

auth_exists ()
{
	git rev-parse --verify $authority >/dev/null 2>&1
}

auth_has_upstream ()
{
	git rev-parse --verify $auth_upstream >/dev/null 2>&1
}

ref_is_contained_in ()
{
	ref=$1
	in=$2

	test "$(git merge-base $ref $in)" = "$(git rev-parse $ref)"
}

is_development ()
{
	if is_dirty; then
		true
	elif auth_exists; then
		if auth_has_upstream; then
			! ref_is_contained_in HEAD $auth_upstream
		else
			! ref_is_contained_in HEAD $authority
		fi
	else
		true
	fi
}

print_version ()
{
	# Print upstream's version
	if auth_exists; then
		if auth_has_upstream && ! [ "$force_authoritative" ]; then
			echo -n $(tag_and_distance $auth_upstream)
		else
			echo -n $(tag_and_distance $authority)
		fi
	else
		echo -n 0
	fi

	# Print the development header if we're ahead of upstream
	if is_development && ! [ "$force_authoritative" ]; then
		echo -n $(development_suffix)
	fi

	# Print the git suffix, always
	echo $(git_suffix)
}

authority="master"
auth_upstream="$authority@{upstream}"

case "$#,$1" in
	0,*)
		print_version
		;;

	1,--check-development)
		is_development
		;;

	1,--force-authoritative)
		force_authoritative=1
		print_version
		;;

	*)
		echo Error 1>&2
		exit 1
		;;
esac
